cpu
cpu内部有众多的电路，里面有大量的晶体管
集成度小到只有纳米级别，比如十几纳米
晶体管就是一些门电路 与门 非门 异或门。。。。
能做一些逻辑运算或算术运算
多个门电路按照特定逻辑组织的一块儿所能实现的运算能力是不一样的:比如 有的是加法运算，有的是减法运算，有的是移位运算
cpu 有很多针脚或者触点。每个针脚或触点提供的功能是不一样的。一般都是为了完成一个所谓的电器运算或电子运算。是最为基础的功能

为了让cpu完成我们所期望的运算？我们要调用其CPU某处的针脚功能才可以

所以任何一个所谓的计算芯片他必定有一个最基本的叫做 载入或者boot的过程

假如说有这么一个机制:有一个计算机的cpu能够从我的内存中某一个特定地址的位置（存储空间） 取出数据或者取出一个控制指令

它要求我们cpu干什么？Cpu会自动去取第一个。取出来之后  这里边存储的是什么 让干什么cpu就能做什么

调用cpu的某个针脚所提供的功能。
每个cpu所提供的功能都通常通过cpu的指令来实现，多个指令联合起来 叫指令集

同一个cpu当中 为了完成一个不同的运算功能，他们很多时候可能内部有多个不同的芯片组成
比如 完成多媒体处理和完成整数运算那是两回事 完成整数运算和完成浮点数（就是小数）运算那又是两回事完全是由两个不同的芯片完成的
所以同一个cpu内部他可能有多种功能上独立的芯片完成，而且每一组芯片提供的运算能力和指令都不一样，所以说同一个cpu内部所能够提供的指令集也有很多

程序员:写程序如何实现？

本质上将讲 cpu 只能够运行二进制（0，1） 格式的指令 也就是指令集范围内所给出的二进制格式的指令。但是二进制格式对程序员来讲很难
通过二进制格式编程，全球能达到这种水平的人 微乎其微。
通过这种二进制格式提供给我们的编程接口过于底层能够完成这种的人太少。
又想让大多数人都能学会要使用编程语言，让程序员写程序代码能接近人类的思维理解方式才可以

编程语言:高级语言（离我们人类越近我们就认为越高级，高级不是指中文强，也不是性能强大，而是指越接近人类的自然语言） 低级语言（离机器语言越近我们就认为这种语言越低级）


机器语言写出来的程序性能更好 然而程序员写的是越接近人类的自然语言（高级语言）。
机器语言由于过于底层，所以大多数人都没办法完成，所以每一个芯片在生产完成时他们都自己附带一套略微高级一点的编程语言接口

这个编程接口通常叫微码编程接口，也称为汇编语言（人类能看懂但操作方式仍然很底层），很难写成大程序，运行速度再快也不接近人类的高级语言


人类能看懂的语言叫高级语言，这时 计算机却看不懂人类写的高级语言了需要转换（翻译）成机器能看懂的语言

高级语言:第一步转换成汇编对应的芯片所支持的汇编语言（c语言管这一步叫编译；翻译。离人类较近的语言转换成汇编语言那个对应的机器cpu的语言）。第二部转换成对机器指令的调用。


汇编语言

机器语言

amd x86与intel x86 cpu是能互相兼容的

若cpu一个是intel x86系列,,另一个是arm 系列，这两者之间的底层汇编语言都不是一样的

但他们可以支持同一种高级

从高级语言转换为汇编语言的过程取决于底层的芯片是什么格式的
不同厂商所生产的不同型号，他们是不一样的
最终我们要将汇编转换成特定芯片所支持的机器代码 也叫机器指令




将汇编语言转换成机器语言叫汇编过程（实际上高级语言转换成叫object的目标代码，再转换成汇编指令）
按照人类所写好的要它干的活的编排，它才能一步一步的去完成某些任务这个 编排的操作就叫程序


不同厂商生产的计算机芯片提供的指令集是不一样的 同样的，不同计算机配置运行的程序所使用的应用资源是不一样的
常规来说 任何一个程序员在写程序的时候都要考虑硬件规格，底层机器是什么？有多少资源？CPU有多快，哪个厂商生产的？内存有多大
如果写了一个程序可以在512M的主机上用，稍微换一个环境或配置就不可以使用了！！！
为达到灵活使用的目的:必须将底层的差异给消除了
如何消除底层差异 



找一个翻译来应付底层各种具体情况的不同向我们输出却是同一种接口，他要给我输出一种语言却要去处理各种底层情况的不同

找一个翻译应付底层各种具体情况的不同但向上输出的结果却是统一的，它在下面要说多国语言而向上却只说一种语言，所以这就是通用软件（操作系统）

为了避免程序员写程序时就得应付各种机器的不同的情况，找一个翻译，这个翻译它自己能应付底层的不同，但是向上输出的接口却是统一的，这就是所谓的通用软件形式

有了操作系统你不需要操心 cpu是什么？只需要面向操作系统这个接口写程序就可以
所以操作系统是一个通常软件程序，其次它是将底层计算机提供的各种计算能力给抽象为一种统一接口的程序

现在程序员写程序不是面向硬件写的，而是面向操作系统写的

os:出于通用目的（把底层不同的硬件都抽象成统一的接口），
cpu时间片切割和分配（把cpu更多提供的计算能力分配给多个程序来运行，也就是说的进程管理）
将有限的内存资源分配给多个同时运行的程序（内存管理，网络管理，安全管理）

【我们所做的一切功能是通过操作系统这款软件来完成的，而不是我们直接操作计算机底层的硬件来完成】

的一种软件程序
cpu中一些指令是

特权指令 拥有管理功能（跟硬件打交道，操作系统能够运行普通指令但只有操作系统才能有权限执行特权指令）
普通指令:完成日常基本操作（程序员在操作系统之上写的程序只能调用普通指令）

cpu厂商把cpu所能实现的指令集分成四个环，从内到外四个环，分别是 环0（特权指令），环1，环2，环3（应用程序运行普通指令）


比如 mkdir 要在硬盘上创建目录
操作硬盘写数据 这就是特权指令


应用程序需要完成一些管理操作（创建文件  删除目录）

任何一个普通程序需要完成这个特权操作是没有办法直接运行  需要向内核进行申请

整个系统运行起来以后，在内存中有两类指令， 我们的操作系统随时虎视眈眈的监控特权指令，万一发现哪个程序要想运行特权指令，你只能向
操作系统申请帮你代理完成

通用应用程序向操作系统发送请求
通用应用程序必须能随时接收别人发来的请求，同时操作系统接收应用程序发出来的请求，检查是否有权限。操作系统会将底层硬件的所有特权封装为系统调用来实现，按权限给予应用程序相应的回应。每一个所允许接收的请求，叫每一个系统调用，(应用程序对操作系统发送的每一个调用请求)称之为system call

编程层次（操作系统层次）:
	硬件规格（最下层，最底层）
	系统调用:(系统调用会将底层的硬件规格抽象出有限数量)
	操作系统(kernel):把底层不同的硬件都抽象成统一的接口，并不完成具体工作，需要写应用程序完成具体工作
	库(不是必须的):灵活度减小 离成品就更进一步了。因为这是在操作系统上又抽象的一层   如果是最底层 灵活度很大，离成品更远

操作系统连个基本组成:os+库（Windows是c或者c++库）


程序员可以面向系统调用去编程，也可以面向库调用实现！


运行:

每一个程序都是二进制格式，程序运行意味着这个程序可以占据cpu一条指令。  一个程序的运行其实意味着任何占据的cpu自上而下一条一条的去运行

程序运行提交给内核，要给这条指令分配一些cpu让其能够获取使用cpu的能力从而运行命令

程序如何与内核打交道

让程序运行有两种方式:
	开机自启动
	要有一个程序允许用户跟计算机打交道，这个程序叫用户接口（前端）
	
用户接口有两种:
	gui:graphic user interface:图形用户接口
	CLI:command line interface：命令行接口

输入输出设备跟内核打交道，内核不认识。这就是用户接口程序（gui）指挥其应用程序完成

ABI:任何操作系统的运行格式不一样，可执行文件的运行格式不一样，这种运行格式接口叫应用二进制运行接口程序
（面向不同操作系统的程序，做好二进制格式以后，是无法兼容的。但是，如果你没有编译【源程序是需要编译的，转换汇编，在转换成机器没转成目标代码的话，跟操作系统的本身没关系，源代码一样，接口一样，就可以跨平台】，源程序如果说我们程序员所面向的编程接口底层操作系统级别不同但如果接口相同 ，那么他们是可以互相跨平台编译的）

编程接口叫api接口:Windows与Linux的运行格式不一样，但编程接口可以是一样，没编译之前的源程序兼容，细节可以不一样。应用编程接口

在面向库的编程时，应用程序写出来的程序，这个接口叫api.如果编译成二进制格式，这个时候的接口叫ABI接口


程序员面向的是api接口
普通用户面向的是abi接口